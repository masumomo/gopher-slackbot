// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/presenter/post_presenter.go

// Package mock_presenter is a generated GoMock package.
package mock_presenter

import (
	"fmt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockPostPresenter is a mock of PostPresenter interface
type MockPostPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPostPresenterMockRecorder
}

// MockPostPresenterMockRecorder is the mock recorder for MockPostPresenter
type MockPostPresenterMockRecorder struct {
	mock *MockPostPresenter
}

// NewMockPostPresenter creates a new mock instance
func NewMockPostPresenter(ctrl *gomock.Controller) *MockPostPresenter {
	mock := &MockPostPresenter{ctrl: ctrl}
	mock.recorder = &MockPostPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostPresenter) EXPECT() *MockPostPresenterMockRecorder {
	return m.recorder
}

// PostMsg mocks base method
func (m *MockPostPresenter) PostMsg(channelID string, msg ...slack.MsgOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID}
	for _, a := range msg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMsg", varargs...)
	fmt.Println("ret", ret)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMsg indicates an expected call of PostMsg
func (mr *MockPostPresenterMockRecorder) PostMsg(channelID interface{}, msg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID}, msg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMsg", reflect.TypeOf((*MockPostPresenter)(nil).PostMsg), varargs...)
}

// PostBroadCastMsg mocks base method
func (m *MockPostPresenter) PostBroadCastMsg(msg ...slack.MsgOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range msg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBroadCastMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostBroadCastMsg indicates an expected call of PostBroadCastMsg
func (mr *MockPostPresenterMockRecorder) PostBroadCastMsg(msg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBroadCastMsg", reflect.TypeOf((*MockPostPresenter)(nil).PostBroadCastMsg), msg...)
}
