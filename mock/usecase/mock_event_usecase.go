// Code generated by MockGen. DO NOT EDIT.
// Source: event_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	slackevents "github.com/slack-go/slack/slackevents"
	reflect "reflect"
)

// MockEventUsecase is a mock of EventUsecase interface
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// SaveEvent mocks base method
func (m *MockEventUsecase) SaveEvent(ctx context.Context, eventType, eventText, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvent", ctx, eventType, eventText, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvent indicates an expected call of SaveEvent
func (mr *MockEventUsecaseMockRecorder) SaveEvent(ctx, eventType, eventText, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvent", reflect.TypeOf((*MockEventUsecase)(nil).SaveEvent), ctx, eventType, eventText, createdBy)
}

// SaveGoDoc mocks base method
func (m *MockEventUsecase) SaveGoDoc(ctx context.Context, goDocName, url, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGoDoc", ctx, goDocName, url, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGoDoc indicates an expected call of SaveGoDoc
func (mr *MockEventUsecaseMockRecorder) SaveGoDoc(ctx, goDocName, url, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGoDoc", reflect.TypeOf((*MockEventUsecase)(nil).SaveGoDoc), ctx, goDocName, url, createdBy)
}

// RcvEvent mocks base method
func (m *MockEventUsecase) RcvEvent(ctx context.Context, evt *slackevents.EventsAPIEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RcvEvent", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// RcvEvent indicates an expected call of RcvEvent
func (mr *MockEventUsecaseMockRecorder) RcvEvent(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RcvEvent", reflect.TypeOf((*MockEventUsecase)(nil).RcvEvent), ctx, evt)
}
