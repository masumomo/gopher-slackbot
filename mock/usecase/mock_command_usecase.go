// Code generated by MockGen. DO NOT EDIT.
// Source: command_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
	reflect "reflect"
)

// MockCommandUsecase is a mock of CommandUsecase interface
type MockCommandUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommandUsecaseMockRecorder
}

// MockCommandUsecaseMockRecorder is the mock recorder for MockCommandUsecase
type MockCommandUsecaseMockRecorder struct {
	mock *MockCommandUsecase
}

// NewMockCommandUsecase creates a new mock instance
func NewMockCommandUsecase(ctrl *gomock.Controller) *MockCommandUsecase {
	mock := &MockCommandUsecase{ctrl: ctrl}
	mock.recorder = &MockCommandUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandUsecase) EXPECT() *MockCommandUsecaseMockRecorder {
	return m.recorder
}

// SaveCommand mocks base method
func (m *MockCommandUsecase) SaveCommand(ctx context.Context, commandName, commandText, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommand", ctx, commandName, commandText, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommand indicates an expected call of SaveCommand
func (mr *MockCommandUsecaseMockRecorder) SaveCommand(ctx, commandName, commandText, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommand", reflect.TypeOf((*MockCommandUsecase)(nil).SaveCommand), ctx, commandName, commandText, createdBy)
}

// RcvCommand mocks base method
func (m *MockCommandUsecase) RcvCommand(ctx context.Context, sl *slack.SlashCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RcvCommand", ctx, sl)
	ret0, _ := ret[0].(error)
	return ret0
}

// RcvCommand indicates an expected call of RcvCommand
func (mr *MockCommandUsecaseMockRecorder) RcvCommand(ctx, sl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RcvCommand", reflect.TypeOf((*MockCommandUsecase)(nil).RcvCommand), ctx, sl)
}
