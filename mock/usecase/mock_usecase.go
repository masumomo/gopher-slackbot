// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// SaveEvent mocks base method
func (m *MockUseCase) SaveEvent(ctx context.Context, eventType, eventText, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvent", ctx, eventType, eventText, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvent indicates an expected call of SaveEvent
func (mr *MockUseCaseMockRecorder) SaveEvent(ctx, eventType, eventText, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvent", reflect.TypeOf((*MockUseCase)(nil).SaveEvent), ctx, eventType, eventText, createdBy)
}

// SaveCommand mocks base method
func (m *MockUseCase) SaveCommand(ctx context.Context, commandName, commandText, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommand", ctx, commandName, commandText, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommand indicates an expected call of SaveCommand
func (mr *MockUseCaseMockRecorder) SaveCommand(ctx, commandName, commandText, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommand", reflect.TypeOf((*MockUseCase)(nil).SaveCommand), ctx, commandName, commandText, createdBy)
}

// SaveInteraction mocks base method
func (m *MockUseCase) SaveInteraction(ctx context.Context, interactionType, action, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInteraction", ctx, interactionType, action, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInteraction indicates an expected call of SaveInteraction
func (mr *MockUseCaseMockRecorder) SaveInteraction(ctx, interactionType, action, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInteraction", reflect.TypeOf((*MockUseCase)(nil).SaveInteraction), ctx, interactionType, action, createdBy)
}

// SaveGoDoc mocks base method
func (m *MockUseCase) SaveGoDoc(ctx context.Context, goDocName, url, createdBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGoDoc", ctx, goDocName, url, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGoDoc indicates an expected call of SaveGoDoc
func (mr *MockUseCaseMockRecorder) SaveGoDoc(ctx, goDocName, url, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGoDoc", reflect.TypeOf((*MockUseCase)(nil).SaveGoDoc), ctx, goDocName, url, createdBy)
}
